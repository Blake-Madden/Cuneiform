- `allI18N`

Perform all internationalization checks (the default).

- `suspectL10NString`

Check for translatable strings that should not be (e.g., numbers, keywords, `printf()` commands).

- `suspectL10NUsage`

Check for translatable strings being used in internal contexts (e.g., debugging functions).

- `urlInL10NString`

Check for translatable strings that contain URLs or email addresses.

It is recommended to dynamically format these into the string so that translators
do not have to manage them.

- `notL10NAvailable`

Check for strings not exposed for translation.

- `deprecatedMacro`

Check for deprecated text macros and functions.

This will detect the usage of functions that are no longer relevant, and provide
a suggested replacement.

For example, the `TCHAR` functions and macros [@win32-strings; @win32-strings-guide] used in Win32 programming
(e.g., `_TEXT`, `_tcscmp`) to help target Windows 98 and NT are no longer necessary.
`i18n-check` will recommend how to remove or replace these.

- `nonUTF8File`

Check that files containing extended ASCII characters are UTF-8 encoded.

UTF-8 is recommended for compiler portability.

- `UTF8FileWithBOM`

Check for UTF-8 encoded files which start with a BOM/UTF-8 signature.

It is recommended to save without the file signature for best compiler portability.

This is turned off by default.

- `unencodedExtASCII`

Check for strings containing extended ASCII characters that are not encoded.

This is turned off by default.

- `printfSingleNumber`

Check for `printf()`-like functions being used to just format a number.

In these situations, it is recommended to use the more modern `std::to_[w]string()` function.

This is limited to integral values; `printf()` commands with floating-point precision will be ignored.

- `dupValAssignedToIds`

Check for the same value being assigned to different ID variables.

This check is performed per file; the same ID being assigned multiple times,
but within separate files, will be ignored.

This is turned off by default.

- `numberAssignedToId`

Check for ID variables being assigned a hard-coded number.

It may be preferred to assign framework-defined constants (e.g., `wxID_HIGHEST`) to IDs.

This is turned off by default.

- `malformedString`

Check for malformed syntax in strings (e.g., malformed HTML tags).

- `fontIssue`

Check for font issues.

This is performed on Windows *.rc files and checks for dialogs not using \'MS Shell Dlg\' [@ms-shell-dlg]
or unusual font sizes.

- `allL10N`

Perform all localization checks (the default).

- `printfMismatch`

Check for mismatching `printf()` commands between source and translation strings.

This is performed on *gettext* \*.po files and will analyze format strings for the following languages:

- C/C++

::: {.callout-note collapse=false}
The checks performed here are strict; all `printf()` commands in translations must match
their source counterpart exactly. For example, "%lu" vs. "%l" will emit a warning.
Questionable commands such as "% s" (space is only meant for numeric formatting) will also emit a warning.
:::

- `allCodeFormatting`

Check all code formatting issues (see below).

::: {.callout-note}
These are not enabled by default.
:::

- `trailingSpaces`

Check for trailing spaces at the end of each line.

- `tabs`

Check for tabs.
(Spaces are recommended as tabs may appear differently between editors.)

- `wideLine`

Check for overly long lines.

- `commentMissingSpace`

Check that there is a space at the start of a comment.
