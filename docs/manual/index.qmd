::: {.content-visible when-format="html"}
<!-- Just want this preface in the gitbook.
     PDF output will have its own copyright page after the title.-->

This book is the guide to using *i18n-check*, an internationalization & localization analysis system for C++ code and translation resources.

![](images/CC_BY-NC-ND.png)

This book is licensed under the [Creative Commons Attribution-NonCommercial-NoDerivs 4.0 International License](https://creativecommons.org/licenses/by-nc-nd/4.0/).
:::

# Introduction

`i18n-check` is a command-line utility that scans a folder of a code and translation files and checks for the following issues:

- Strings exposed for translation[^1] that probably should not be. This includes (but not limited to):
  - Filenames
  - Strings only containing `printf()` commands
  - Numbers
  - Regular expressions
  - Strings inside of debug functions
  - Formulas
  - Code (used for code generators)
  - Strings that contain URLs or email addresses
- Strings not available for translation that possibly should be.
- Strings that contain extended ASCII characters that are not encoded.
  ("Danke sch√∂n" instead of "Danke sch\\U000000F6n".)<br />
  Encoding extended ASCII characters is recommended for
  best portability between compilers.
- Strings with malformed syntax (e.g., malformed HTML tags).
- Use of deprecated text macros (e.g., `wxT()` in wxWidgets, `_T()` in Win32).
- Use of deprecated string functions (e.g., `_tcsncpy` in Win32).
- Files that contain extended ASCII characters, but are not UTF-8 encoded.<br />
  (It is recommended that files be UTF-8 encoded for portability between compilers.)
- UTF-8 encoded files which start with a BOM/UTF-8 signature.<br />
  It is recommended to save without the file signature for best compiler portability.
- `printf()`-like functions being used to just format an integer to a string.<br />
  It is recommended to use `std::to_string()` to do this instead.
- `printf()` command mismatches between source and translation strings.<br />
  (PO catalogs with C/C++ strings are currently supported.)
- ID variable[^2] assignment issues:
  - The same value being assigned to different ID variables in the same source file
    (e.g., "wxID_HIGHEST + 1" being assigned to two menu ID constants).
  - Hard-coded numbers being assigned to ID variables.
  - Out-of-range values being assigned to MFC IDs [@mfc-ids].
- Font issues in Windows resource files [@rc-string-tables]:
  - Dialogs not using "MS Shell Dlg" or "MS Shell Dlg 2."
  - Dialogs with non-standard font sizes.

Code formatting issues can also be checked for, such as:

- Trailing spaces at the end of a line.
- Tabs (instead of spaces).
- Lines longer than 120 characters.
- Spaces missing between "//" and their comments.

`i18n-check` will work with C code, '98 and modern C++ code, GNU *gettext* [@gettext] translation files (\*.po), and Windows resource files (\*.rc).
In particular, it offers specialized support for the following frameworks:

- wxWidgets
- Qt
- KDE
- GTK
- Win32
- MFC

[^1]: Strings are considered translatable if inside of [gettext](https://www.gnu.org/software/gettext/),
[wxWidgets](https://www.wxwidgets.org), [Qt](https://www.qt.io), or
[KDE](https://develop.kde.org/docs/plasma/widget/translations-i18n) (ki18n) i18n functions.
This includes functions and macros such as `gettext()`, `_()`, `tr()`, `translate()`,
`QT_TR_NOOP()`, `wxTRANSLATE()`, `i18n()`, etc.<br />
[^2]: Variables are determined to be ID variables if they are integral types with the whole word "ID" in their name.

